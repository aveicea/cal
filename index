<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>캘린더 뷰어</title>
<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
    margin: 0;
    padding: 0;
    background: #ffffff;
    height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  .header {
    padding: 10px 20px;
    background: #fff;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
  }
  
  .view-selector {
    display: flex;
    gap: 8px;
    align-items: center;
    flex: 1;
    justify-content: center;
  }
  
  .view-btn {
    padding: 6px 12px;
    border: 1px solid #ddd;
    background: white;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    color: #666;
  }
  
  .view-btn.active {
    background: var(--accent-color, #4285f4);
    color: white;
    border-color: var(--accent-color, #4285f4);
  }
  
  .nav-controls {
    display: flex;
    gap: 8px;
    align-items: center;
    margin-right: 20px;
  }
  
  .nav-btn {
    width: 32px;
    height: 32px;
    border: 1px solid #ddd;
    background: white;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }
  
  .nav-btn:hover {
    background: #f8f9fa;
  }
  
  .current-date {
    padding: 6px 12px;
    background: #f8f9fa;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    color: #333;
    min-width: 120px;
    text-align: center;
  }
  
  .settings-btn {
    width: 32px;
    height: 32px;
    border: none;
    background: #f8f9fa;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    transition: all 0.2s ease;
  }
  
  .settings-btn:hover {
    background: #e8eaed;
    color: #333;
  }
  
  .settings-panel {
    position: absolute;
    top: 45px;
    right: 20px;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    width: 350px;
    z-index: 1000;
    display: none;
    max-height: 500px;
    overflow-y: auto;
  }
  
  .settings-title {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 15px;
    color: #333;
  }
  
  .color-picker-group {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .color-picker-title {
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 10px;
    color: #333;
  }
  
  .color-input-row {
    display: flex;
    gap: 8px;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .color-picker-input {
    width: 40px;
    height: 30px;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    padding: 0;
  }
  
  .color-text-input {
    flex: 1;
    padding: 6px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 12px;
    font-family: monospace;
  }
  
  .preset-colors {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    gap: 4px;
  }
  
  .preset-color {
    width: 24px;
    height: 24px;
    border-radius: 4px;
    border: 2px solid transparent;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .preset-color:hover {
    transform: scale(1.1);
    border-color: #333;
  }
  
  .api-key-section {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .input-group {
    margin-bottom: 10px;
  }
  
  .input-group label {
    display: block;
    font-size: 12px;
    color: #666;
    margin-bottom: 4px;
  }
  
  .input-group input {
    width: 100%;
    padding: 6px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 12px;
    box-sizing: border-box;
  }
  
  .btn {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .btn-primary {
    background: var(--accent-color, #4285f4);
    color: white;
  }
  
  .btn-primary:hover {
    background: var(--accent-hover-color, #3367d6);
  }
  
  .btn-secondary {
    background: #f8f9fa;
    color: #666;
    border: 1px solid #ddd;
  }
  
  .calendar-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .calendar-content {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    background: #f8f9fa;
  }
  
  .calendar-grid {
    display: grid;
    gap: 1px;
    background: #e0e0e0;
    border: 1px solid #e0e0e0;
  }
  
  .calendar-day {
    background: white;
    min-height: 100px;
    padding: 8px;
    position: relative;
  }
  
  .calendar-day.other-month {
    background: #f8f9fa;
    color: #999;
  }
  
  .calendar-day.today {
    background: #e3f2fd;
  }
  
  .day-number {
    font-weight: 500;
    margin-bottom: 4px;
  }
  
  .event {
    background: var(--accent-color, #4285f4);
    color: white;
    padding: 2px 4px;
    border-radius: 2px;
    font-size: 11px;
    margin-bottom: 2px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  .week-view {
    display: grid;
    grid-template-columns: 60px repeat(7, 1fr);
    gap: 1px;
    background: #e0e0e0;
  }
  
  .time-slot {
    background: white;
    padding: 4px;
    font-size: 12px;
    color: #666;
    border-right: 1px solid #e0e0e0;
  }
  
  .week-day {
    background: white;
    min-height: 60px;
    position: relative;
  }
  
  .week-header {
    background: #f5f5f5;
    padding: 8px;
    font-weight: 500;
    text-align: center;
    font-size: 14px;
  }
  
  .loading {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 200px;
    color: #666;
  }
  
  .error-message {
    background: #ffebee;
    border: 1px solid #ffcdd2;
    border-radius: 8px;
    padding: 16px;
    margin: 20px;
    color: #c62828;
  }
  
  .setup-message {
    background: white;
    border-radius: 12px;
    padding: 40px;
    margin: 40px;
    text-align: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
  }
  
  .setup-icon {
    font-size: 48px;
    margin-bottom: 16px;
  }
  
  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.1);
    z-index: 999;
    display: none;
  }
  
  @media (max-width: 768px) {
    .settings-panel {
      right: 10px;
      left: 10px;
      width: auto;
    }
    .nav-controls {
      margin-right: 10px;
    }
    .calendar-grid {
      grid-template-columns: repeat(7, 1fr);
    }
    .calendar-day {
      min-height: 80px;
    }
  }
  
  /* 월간 뷰 */
  .month-view {
    grid-template-columns: repeat(7, 1fr);
  }
  
  /* 주간 뷰 헤더 */
  .week-view .week-header {
    grid-column: span 1;
  }
  
  .week-view .time-header {
    background: #f5f5f5;
    grid-column: 1;
  }
</style>
</head>
<body>
  <div class="header">
    <div class="view-selector">
      <button class="view-btn active" onclick="setView('month')" id="monthBtn">월간</button>
      <button class="view-btn" onclick="setView('week')" id="weekBtn">주간</button>
      <button class="view-btn" onclick="setView('day')" id="dayBtn">일간</button>
    </div>
    
    <div class="nav-controls">
      <button class="nav-btn" onclick="navigateCalendar(-1)">‹</button>
      <div class="current-date" id="currentDate"></div>
      <button class="nav-btn" onclick="navigateCalendar(1)">›</button>
      <button class="nav-btn" onclick="goToToday()">오늘</button>
    </div>
    
    <button class="settings-btn" onclick="toggleSettings()">⚙️</button>
    
    <div class="settings-panel" id="settingsPanel">
      <div class="settings-title">설정</div>
      
      <div class="color-picker-group">
        <div class="color-picker-title">테마 색상</div>
        <div class="color-input-row">
          <input type="color" class="color-picker-input" id="colorPicker" onchange="updateColorFromPicker()">
          <input type="text" class="color-text-input" id="colorText" placeholder="#4285F4" oninput="updateColorFromText()" maxlength="7">
        </div>
        <div class="preset-colors">
          <div class="preset-color" style="background-color: #4285f4;" onclick="setPresetColor('#4285f4')"></div>
          <div class="preset-color" style="background-color: #34a853;" onclick="setPresetColor('#34a853')"></div>
          <div class="preset-color" style="background-color: #ea4335;" onclick="setPresetColor('#ea4335')"></div>
          <div class="preset-color" style="background-color: #fbbc04;" onclick="setPresetColor('#fbbc04')"></div>
          <div class="preset-color" style="background-color: #9c27b0;" onclick="setPresetColor('#9c27b0')"></div>
          <div class="preset-color" style="background-color: #ff6d00;" onclick="setPresetColor('#ff6d00')"></div>
          <div class="preset-color" style="background-color: #607d8b;" onclick="setPresetColor('#607d8b')"></div>
          <div class="preset-color" style="background-color: #795548;" onclick="setPresetColor('#795548')"></div>
          <div class="preset-color" style="background-color: #e91e63;" onclick="setPresetColor('#e91e63')"></div>
          <div class="preset-color" style="background-color: #00bcd4;" onclick="setPresetColor('#00bcd4')"></div>
          <div class="preset-color" style="background-color: #8bc34a;" onclick="setPresetColor('#8bc34a')"></div>
          <div class="preset-color" style="background-color: #ffc107;" onclick="setPresetColor('#ffc107')"></div>
        </div>
      </div>
      
      <div class="api-key-section">
        <div class="color-picker-title">Google Calendar 연동</div>
        <div class="input-group">
          <label>API 키 (선택사항)</label>
          <input type="text" id="apiKey" placeholder="Google Calendar API 키를 입력하세요">
        </div>
        <div class="input-group">
          <label>캘린더 ID</label>
          <input type="text" id="calendarId" placeholder="예: primary 또는 calendar@gmail.com">
        </div>
        <button class="btn btn-primary" onclick="loadCalendarData()">캘린더 연동</button>
        <button class="btn btn-secondary" onclick="showSampleData()">샘플 데이터 보기</button>
      </div>
    </div>
  </div>
  
  <div class="overlay" id="overlay" onclick="closeSettings()"></div>
  
  <div class="calendar-container">
    <div class="calendar-content" id="calendarContent">
      <div class="setup-message">
        <div class="setup-icon">📅</div>
        <h2>자체 제작 캘린더 뷰어</h2>
        <p>Google Calendar API를 사용하여 캘린더 데이터를 직접 가져와서 표시합니다.</p>
        <p style="font-size: 14px; color: #666; margin-top: 16px;">
          우상단 설정 버튼을 클릭하여 캘린더를 연동하거나 샘플 데이터를 확인해보세요.
        </p>
      </div>
    </div>
  </div>

<script>
  // 전역 변수
  let currentView = 'month';
  let currentDate = new Date();
  let accentColor = '#4285f4';
  let accentHoverColor = '#3367d6';
  let calendarEvents = [];
  
  // DOM 요소
  const settingsPanel = document.getElementById("settingsPanel");
  const overlay = document.getElementById("overlay");
  const colorPicker = document.getElementById("colorPicker");
  const colorText = document.getElementById("colorText");
  const currentDateElement = document.getElementById("currentDate");
  const calendarContent = document.getElementById("calendarContent");
  
  // 초기화
  function init() {
    loadFromStorage();
    updateCurrentDateDisplay();
    setAccentColor(accentColor);
  }
  
  // 설정 패널
  function toggleSettings() {
    const isVisible = settingsPanel.style.display === 'block';
    if (isVisible) {
      closeSettings();
    } else {
      openSettings();
    }
  }
  
  function openSettings() {
    settingsPanel.style.display = 'block';
    overlay.style.display = 'block';
  }
  
  function closeSettings() {
    settingsPanel.style.display = 'none';
    overlay.style.display = 'none';
  }
  
  // 뷰 변경
  function setView(viewMode) {
    currentView = viewMode;
    document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
    document.getElementById(viewMode + 'Btn').classList.add('active');
    updateCurrentDateDisplay();
    renderCalendar();
    saveToStorage();
  }
  
  // 날짜 네비게이션
  function navigateCalendar(direction) {
    if (currentView === 'month') {
      currentDate.setMonth(currentDate.getMonth() + direction);
    } else if (currentView === 'week') {
      currentDate.setDate(currentDate.getDate() + (direction * 7));
    } else if (currentView === 'day') {
      currentDate.setDate(currentDate.getDate() + direction);
    }
    updateCurrentDateDisplay();
    renderCalendar();
  }
  
  function goToToday() {
    currentDate = new Date();
    updateCurrentDateDisplay();
    renderCalendar();
  }
  
  function updateCurrentDateDisplay() {
    const options = { year: 'numeric', month: 'long', locale: 'ko-KR' };
    if (currentView === 'day') {
      options.day = 'numeric';
      options.weekday = 'long';
    }
    currentDateElement.textContent = currentDate.toLocaleDateString('ko-KR', options);
  }
  
  // 색상 관리
  function darkenColor(hex, percent) {
    const num = parseInt(hex.replace("#", ""), 16);
    const amt = Math.round(2.55 * percent);
    const R = (num >> 16) - amt;
    const G = (num >> 8 & 0x00FF) - amt;
    const B = (num & 0x0000FF) - amt;
    return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
      (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
      (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
  }
  
  function setAccentColor(color) {
    accentColor = color;
    accentHoverColor = darkenColor(color, 15);
    
    document.documentElement.style.setProperty('--accent-color', color);
    document.documentElement.style.setProperty('--accent-hover-color', accentHoverColor);
    
    colorPicker.value = color;
    colorText.value = color.toUpperCase();
    
    saveToStorage();
  }
  
  function setPresetColor(color) {
    setAccentColor(color);
  }
  
  function updateColorFromPicker() {
    setAccentColor(colorPicker.value);
  }
  
  function updateColorFromText() {
    let color = colorText.value.trim();
    if (!color.startsWith('#')) color = '#' + color;
    if (/^#[0-9A-F]{6}$/i.test(color)) {
      setAccentColor(color);
    }
  }
  
  // 캘린더 렌더링
  function renderCalendar() {
    if (currentView === 'month') {
      renderMonthView();
    } else if (currentView === 'week') {
      renderWeekView();
    } else if (currentView === 'day') {
      renderDayView();
    }
  }
  
  function renderMonthView() {
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const grid = document.createElement('div');
    grid.className = 'calendar-grid month-view';
    
    // 요일 헤더
    const weekdays = ['일', '월', '화', '수', '목', '금', '토'];
    weekdays.forEach(day => {
      const header = document.createElement('div');
      header.className = 'week-header';
      header.textContent = day;
      grid.appendChild(header);
    });
    
    // 날짜 셀
    const today = new Date();
    for (let i = 0; i < 42; i++) {
      const cellDate = new Date(startDate);
      cellDate.setDate(startDate.getDate() + i);
      
      const cell = document.createElement('div');
      cell.className = 'calendar-day';
      
      if (cellDate.getMonth() !== currentDate.getMonth()) {
        cell.classList.add('other-month');
      }
      
      if (cellDate.toDateString() === today.toDateString()) {
        cell.classList.add('today');
      }
      
      const dayNumber = document.createElement('div');
      dayNumber.className = 'day-number';
      dayNumber.textContent = cellDate.getDate();
      cell.appendChild(dayNumber);
      
      // 이벤트 표시
      const dayEvents = getEventsForDate(cellDate);
      dayEvents.forEach(event => {
        const eventDiv = document.createElement('div');
        eventDiv.className = 'event';
        eventDiv.textContent = event.title;
        eventDiv.title = event.title + '\n' + event.time;
        cell.appendChild(eventDiv);
      });
      
      grid.appendChild(cell);
    }
    
    calendarContent.innerHTML = '';
    calendarContent.appendChild(grid);
  }
  
  function renderWeekView() {
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
    
    const grid = document.createElement('div');
    grid.className = 'calendar-grid week-view';
    
    // 시간 헤더
    const timeHeader = document.createElement('div');
    timeHeader.className = 'week-header time-header';
    timeHeader.textContent = '시간';
    grid.appendChild(timeHeader);
    
    // 요일 헤더
    const weekdays = ['일', '월', '화', '수', '목', '금', '토'];
    for (let i = 0; i < 7; i++) {
      const date = new Date(startOfWeek);
      date.setDate(startOfWeek.getDate() + i);
      
      const header = document.createElement('div');
      header.className = 'week-header';
      header.innerHTML = `${weekdays[i]}<br><small>${date.getDate()}</small>`;
      grid.appendChild(header);
    }
    
    // 시간 슬롯 (9시-18시)
    for (let hour = 9; hour <= 18; hour++) {
      const timeSlot = document.createElement('div');
      timeSlot.className = 'time-slot';
      timeSlot.textContent = `${hour}:00`;
      grid.appendChild(timeSlot);
      
      for (let day = 0; day < 7; day++) {
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + day);
        
        const cell = document.createElement('div');
        cell.className = 'week-day';
        
        const dayEvents = getEventsForDate(date).filter(event => {
          const eventHour = parseInt(event.time.split(':')[0]);
          return eventHour === hour;
        });
        
        dayEvents.forEach(event => {
          const eventDiv = document.createElement('div');
          eventDiv.className = 'event';
          eventDiv.textContent = event.title;
          eventDiv.title = event.title + '\n' + event.time;
          cell.appendChild(eventDiv);
        });
        
        grid.appendChild(cell);
      }
    }
    
    calendarContent.innerHTML = '';
    calendarContent.appendChild(grid);
  }
  
  function renderDayView() {
    const grid = document.createElement('div');
    grid.className = 'calendar-grid week-view';
    grid.style.gridTemplateColumns = '60px 1fr';
    
    // 헤더
    const timeHeader = document.createElement('div');
    timeHeader.className = 'week-header';
    timeHeader.textContent = '시간';
    grid.appendChild(timeHeader);
    
    const dayHeader = document.createElement('div');
    dayHeader.className = 'week-header';
    dayHeader.textContent = currentDate.toLocaleDateString('ko-KR', { 
      weekday: 'long', 
      month: 'long', 
      day: 'numeric' 
    });
    grid.appendChild(dayHeader);
    
    // 시간 슬롯
    for (let hour = 6; hour <= 23; hour++) {
      const timeSlot = document.createElement('div');
      timeSlot.className = 'time-slot';
      timeSlot.textContent = `${hour}:00`;
      grid.appendChild(timeSlot);
      
      const cell = document.createElement('div');
      cell.className = 'week-day';
      cell.style.minHeight = '60px';
      
      const dayEvents = getEventsForDate(currentDate).filter(event => {
        const eventHour = parseInt(event.time.split(':')[0]);
        return eventHour === hour;
      });
      
      dayEvents.forEach(event => {
        const eventDiv = document.createElement('div');
        eventDiv.className = 'event';
        eventDiv.textContent = event.title;
        eventDiv.title = event.title + '\n' + event.time;
        cell.appendChild(eventDiv);
      });
      
      grid.appendChild(cell);
    }
    
    calendarContent.innerHTML = '';
    calendarContent.appendChild(grid);
  }
  
  // 이벤트 데이터 관리
  function getEventsForDate(date) {
    return calendarEvents.filter(event => {
      const eventDate = new Date(event.date);
      return eventDate.toDateString() === date.toDateString();
    });
  }
  
  function showSampleData() {
    calendarEvents = generateSampleEvents();
    renderCalendar();
    closeSettings();
  }
  
  function generateSampleEvents() {
    const events = [];
    const today = new Date();
    
    // 이번 달의 샘플 이벤트들
    for (let i = 0; i < 20; i++) {
      const eventDate = new Date(today.getFullYear(), today.getMonth(), Math.floor(Math.random() * 28) + 1);
      const hour = Math.floor(Math.random() * 10) + 9; // 9시-18시
      const minute = Math.random() > 0.5 ? '00' : '30';
      
      const sampleTitles = [
        '회의', '프레젠테이션', '프로젝트 리뷰', '팀 미팅', '클라이언트 미팅',
        '워크숍', '교육', '점심약속', '병원', '개인 시간',
        '운동', '독서', '쇼핑', '영화', '데이트'
      ];
      
      events.push({
        title: sampleTitles[Math.floor(Math.random() * sampleTitles.length)],
        date: eventDate.toISOString().split('T')[0],
        time: `${hour}:${minute}`
      });
    }
    
    return events;
  }
  
  async function loadCalendarData() {
    const apiKey = document.getElementById('apiKey').value.trim();
    const calendarId = document.getElementById('calendarId').value.trim() || 'primary';
    
    if (!apiKey) {
      alert('Google Calendar API를 사용하려면 API 키가 필요합니다.\n\n샘플 데이터를 확인해보세요!');
      return;
    }
    
    try {
      calendarContent.innerHTML = '<div class="loading">캘린더 데이터를 불러오는 중...</div>';
      
      // Google Calendar API 호출
      const timeMin = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).toISOString();
      const timeMax = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).toISOString();
      
      const response = await fetch(`https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?key=${apiKey}&timeMin=${timeMin}&timeMax=${timeMax}&orderBy=startTime&singleEvents=true`);
      
      if (!response.ok) {
        throw new Error(`API 오류: ${response.status}`);
      }
      
      const data = await response.json();
      
      calendarEvents = data.items.map(event => {
        const startDate = event.start.dateTime || event.start.date;
        const date = new Date(startDate);
        
        return {
          title: event.summary || '제목 없음',
          date: date.toISOString().split('T')[0],
          time: event.start.dateTime ? 
            date.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit', hour12: false }) :
            '종일'
        };
      });
      
      renderCalendar();
      closeSettings();
      
    } catch (error) {
      console.error('캘린더 로드 오류:', error);
      calendarContent.innerHTML = `
        <div class="error-message">
          <strong>캘린더 데이터를 불러올 수 없습니다</strong><br>
          ${error.message}<br><br>
          <small>
          • API 키가 올바른지 확인해주세요<br>
          • 캘린더 ID가 정확한지 확인해주세요<br>
          • API 키에 Calendar API 권한이 있는지 확인해주세요
          </small>
        </div>
      `;
    }
  }
  
  // 저장/불러오기
  function saveToStorage() {
    const data = JSON.stringify({
      view: currentView,
      accentColor: accentColor,
      accentHoverColor: accentHoverColor,
      apiKey: document.getElementById('apiKey')?.value || '',
      calendarId: document.getElementById('calendarId')?.value || 'primary'
    });
    window.calendarStorage = data;
  }
  
  function loadFromStorage() {
    if (window.calendarStorage) {
      try {
        const data = JSON.parse(window.calendarStorage);
        currentView = data.view || 'month';
        accentColor = data.accentColor || '#4285f4';
        accentHoverColor = data.accentHoverColor || darkenColor(accentColor, 15);
        
        // UI 복원
        document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(currentView + 'Btn').classList.add('active');
        
        if (document.getElementById('apiKey')) {
          document.getElementById('apiKey').value = data.apiKey || '';
          document.getElementById('calendarId').value = data.calendarId || 'primary';
        }
      } catch (e) {
        console.log('저장된 데이터를 불러올 수 없습니다.');
      }
    }
  }
  
  // 초기화 실행
  init();
  
  // 키보드 단축키
  document.addEventListener('keydown', function(e) {
    if (e.target.tagName === 'INPUT') return;
    
    switch(e.key) {
      case 'ArrowLeft':
        navigateCalendar(-1);
        break;
      case 'ArrowRight':
        navigateCalendar(1);
        break;
      case 't':
      case 'T':
        goToToday();
        break;
      case 'm':
      case 'M':
        setView('month');
        break;
      case 'w':
      case 'W':
        setView('week');
        break;
      case 'd':
      case 'D':
        setView('day');
        break;
    }
  });
  
  // Enter 키 이벤트
  document.getElementById('calendarId').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      loadCalendarData();
    }
  });
  
  document.getElementById('apiKey').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      loadCalendarData();
    }
  });
</script>
</body>
</html>
